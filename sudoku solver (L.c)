class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
     fun(board);   
    }
    
    bool fun(vector<vector<char>>& board){
        //traverse through every grid and check for . if it exist run a loop to place a misssing digit there
        for(int i = 0; i< board.size(); i++){
            for(int j =0; j < board[0].size(); j++){
                if(board[i][j] == '.'){
                    for(char ch = '1'; ch <= '9'; ch++){
                    if(isValid(i, j, ch, board)){
                        board[i][j] = ch;
                        if(fun(board) == true)return true;
                        else board[i][j] = '.'; // ch is not valid   
                    }
                }
                    return false;
                }
            }
        }
        return true;
    }
    
    bool isValid(int row , int col, char ch, vector<vector<char>>& board){
           for(int i =0; i< 9; i++){
            //row check
            if(board[i][col] == ch)return false; 
            // col check
            if(board[row][i] == ch)return false; 
            //3* 3 matrix check
            //Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
            if(board[3* (row/ 3) + i/3][3* (col/ 3) + i%3] == ch ){
                return false;
            }
        }
        return true;
    }
};
