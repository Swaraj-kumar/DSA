//combination sum
T.c-> 2^t * k
s.c-> k * x

class Solution {
public:
    void findCombination(int ind,int target,vector<int> &nums,vector<int> &ds,vector<vector<int>> &ans){
        if(ind == nums.size()){
            if(target == 0){
                ans.push_back(ds);
            }
            return;
        }
        // pick up the elements
        if(nums[ind] <= target){
            ds.push_back(nums[ind]);
            findCombination(ind,target-nums[ind],nums,ds,ans);
            ds.pop_back();
        }
        //not pick
        findCombination(ind+1,target,nums,ds,ans);
    }
    
    vector<vector<int>> combinationSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        vector<int> ds;
        findCombination(0,target,nums,ds,ans);
        return ans;
    }
};


combination sum2
T.c-> 2^n * k
s.c-> k * x


class Solution {
public:
    void fun(int ind,int target,vector<int> &ds,vector<vector<int>> &ans,vector<int> &nums){
        if(target == 0){
            ans.push_back(ds);
            return;
        }
        for(int i=ind;i<nums.size();i++){
            //to avoid picking up the same combnations i.e. we don't pick same element for certain kth position of a combination 
            if(i > ind && nums[i] == nums[i-1])continue;
            if(nums[i] > target)break;
            
            ds.push_back(nums[i]);
            fun(i+1,target - nums[i],ds,ans,nums);
            ds.pop_back();
        }
    }
    
    vector<vector<int>> combinationSum2(vector<int>& nums, int target) {
    sort(nums.begin(),nums.end());
    vector<vector<int>> ans;
    vector<int>ds;
    fun(0,target,ds,ans,nums);
    return ans;
    }
};



combination sum3
T.c-> 2^t * k
s.c-> k * x


class Solution {
public:
    void fun(int ind,int k,int n,vector<int> &ds,vector<vector<int>> &ans){
        if(n < 0 || ds.size() > k)return;
        if(n == 0 && ds.size() == k){
            ans.push_back(ds);
            return;
        }
        
        for(int i=ind;i<=9;i++){
            ds.push_back(i);
            fun(i+1,k,n-i,ds,ans);
            ds.pop_back();
        }
    }
    
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        vector<int>ds;
        fun(1,k,n,ds,ans);
        return ans;
    }
};
