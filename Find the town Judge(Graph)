https://leetcode.com/problems/find-the-town-judge/

approach 1:

class Solution {
public:
    int findJudge(int N, vector<vector<int>>& trust) {
        vector<int> count(N+1,0);
        
        for(int i=0; i < trust.size(); i++)
        {
            // trust[A][B]  => A trusts B // A can never be judge
            count[trust[i][0]] = -1;
            
            // trust[A][B]  => A trusts B // B will be increased because it is trusted by one person
            count[trust[i][1]]++;
        }
            
        for (int i = 1; i <= N; ++i) {
            // if someone is trusted by N-1 person, ofcourse he is a judge
            if (count[i] == N - 1)
                return i;
        }
        return -1;
    }
};


approach 2:


class Solution {
public:
    
int findJudge(int n, vector<vector<int>>& trust) {
       
		//counts outdegree of a person or node 
		//outdegree means number of nodes that are trusted by given specific node 
        
		vector<int> out(n+1,0);
		
		//counts indegree of a person or node 
		//indegree means number of nodes that trusts a given specific node
        
		vector<int> in(n+1,0);
		
		//loop counts indegree and outdegree
        
		for(auto it : trust){
            out[it[0]]++;
            in[it[1]]++;
        }
		
		//if a node has outdegree==0 that means that node does not trust anyone and
		//indegree ==n-1 that means all other nodes trusts this node except himself
        
		for(int i=1;i<=n;i++){
            if(out[i]==0 && in[i]==n-1)
                return i;
        }
		//if there is no such node return -1
        return -1;
    }
    };



