https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1#



class Solution{
    public:
   void solve(vector<vector<int>> &m, int i,int j,  string str,vector<vector<int>>&vis,int n,vector<string>& ans)
   {
       //edge cases, if matrix[i][j]==0 that means that posisiton is locked and if 
       //vis[i][j]==2 that means that pos is already visisted by us so simply return
       if(i<0 || j<0 || i>=n || j>=n || m[i][j]==0 || vis[i][j]==2)
       return;
       //if the i and j both comes to n-1 then we have reached our destination so push that 
       //string to ans vector and return
       if(i==n-1 && j==n-1){
           ans.push_back(str);
           return;
       }
       // after visitng marks it as visited with 2
       vis[i][j]=2;
       //now traverse over all the direction
       solve(m,i-1,j,str+"U",vis,n,ans);
       solve(m,i+1,j,str+"D",vis,n,ans);
       solve(m,i,j-1,str+"L",vis,n,ans);
       solve(m,i,j+1,str+"R",vis,n,ans);
       //after traversing mark that position again as 0
       vis[i][j]=0;
       
   }
   vector<string> findPath(vector<vector<int>> &m, int n)
   {
       //ans array
       vector<string> ans;
       //taking 2D visited array of size n to marks the elements after visiting
       vector<vector<int>> vis(n,vector<int>(n));
       //if the source node is 0 or the destination node n-1 is 0 then return ans
       if(m[0][0]==0 || m[n-1][n-1]==0) return ans;
       // str will initially add the path like TDRL
       string str="";
       //DFS call
       solve(m,0,0,str,vis,n,ans);
       
       return ans;
   }
};

