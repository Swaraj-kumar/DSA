#include<bits/stdc++.h>
using namespace std;

void printAllSubsequences(int ind,vector<int> &ds,int s,int sum,int arr[],int n){
    if(ind == n){
        if(s == sum){
            for(auto it : ds)cout<<it<<" ";
            cout<<endl;
        }
        return;
    }
    //pick
    ds.push_back(arr[ind]);
    s += arr[ind];
    printAllSubsequences(ind+1,ds,s,sum,arr,n);
    s -= arr[ind];
    ds.pop_back();
    
    //Not pick
    printAllSubsequences(ind+1,ds,s,sum,arr,n);
}

bool printingOnlyOneSubsequence(int ind,vector<int> &ds,int s,int sum,int arr[],int n){
    if(ind == n){
        if(s == sum){
            for(auto it : ds)cout<<it<<" ";
            cout<<endl;
            return true;
        }
        else return false;
    }
    //pick
    ds.push_back(arr[ind]);
    s += arr[ind];
    if(printingOnlyOneSubsequence(ind+1,ds,s,sum,arr,n)==true)return true;
    s -= arr[ind];
    ds.pop_back();
    
    //Not pick
    if(printingOnlyOneSubsequence(ind+1,ds,s,sum,arr,n) ==true)return true;
    
    return false;
}



int TotalCountOfSubSequence(int ind,int s,int sum,int arr[],int n){
    if(ind == n){
        if(s == sum){
            return 1;
        }
        else return 0;
    }
    
    s += arr[ind];
    int l = TotalCountOfSubSequence(ind+1,s,sum,arr,n);
    s -= arr[ind];
    int r = TotalCountOfSubSequence(ind+1,s,sum,arr,n);
    
    return l+r;
}

int main(){
    int arr[] = {1,2,1};
    int n = 3;
    int sum = 2;
    
    vector<int>ds;
    //printing all the subsequences
    cout<<"All possible subsequences are: "<<endl;
    printAllSubsequences(0,ds,0,sum,arr,n);
   
    //printing Only One Subsequence
    cout<<"only one possible subsequence is: "<<endl;
    printingOnlyOneSubsequence(0,ds,0,sum,arr,n);
    
    //counting all the subsequence
    cout<<"count ofall the possible subsequence is: "<<endl;
    cout<<TotalCountOfSubSequence(0,0,sum,arr,n);
    
    return 0;
}
